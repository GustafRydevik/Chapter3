##This jags file assumes a constant incidence of cases

data {
for(i in 1:N){
ones[i]<-1
}
C<-10000
sd.prior<-1.5
infpeak.prior<-10
}



model {


for (i in 1:N){ 
for (test in 1:ntest){
   Test.data[i,test]~dlnorm(log(TestMean[i,test]),tau[test]) ###=1/(sd^2)
   TestMean[i,test]<-test.lookup[ndx[i],test]
}
   ndx[i]<-max(1,sum((InfTime[i]>time.lookup)))
}

###############
####Priors#####
###############


for (i in 1:N){
                ones[i] ~ dbern(p[i])
                p[i] <- L[i] / C
                L[i]<-(incidence+trend*InfTime[i])*exp(-(incidence+trend*(InfTime[i])/2)*InfTime[i])/(1-exp(-(incidence*censorLimit+trend*censorLimit^2/2)))*step(censorLimit-InfTime[i])

         # 1-PropAboveCensor is to scale the incidence to make appropriate for whole population
##trend is negative, to indicate trend as time increases, or time since infection decreases

 }


EpiStart<-max(InfTime)

##Prior for the observational error

for (test in 1:ntest){

## Below is a version of an exponential distribution prior for the sd.
tau[test]<-1/logsd[test]^2
logsd[test]<-log(sd[test])
sd[test]<-log(sd.exp.tmp[test])+1
sd.exp.tmp[test]~dexp(1/0.05)T(1,)



  
}

### This is to ensure that overall incidence is always positive over the time of interest. 

incidence<-mean.incidence-trend*censorLimit/2

trend~dunif(-2*mean.incidence/censorLimit,2*mean.incidence/censorLimit)

mean.incidence<-1-(1-mean.incidence.tmp)^(1/censorLimit)
mean.incidence.tmp~dbeta(N+1,(NTot-N)+1) ##the equivalent incidence if just exposed once.

for(i in 1:N){
InfTime[i]<-Prepeak.time[i]*prepeak[i]+Postpeak.time[i]*(1-prepeak[i])
Postpeak.time[i]~dunif(peak,censorLimit)
Prepeak.time[i]~dunif(0,peak)
prepeak[i]~dbern(0.5)

}
}

##Define TestFun as getting data from vectors of time-and-value.


 
